; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "ToolMaster 64bit"
#define MyAppVersion "0.0.0.1"
#define MyAppDate GetDateTimeString('yyyy/mm/dd', '-', '')
#define MyAppPublisher "ATEC IoT Co., Inc."
#define MyAppExeName "ToolMaster.exe"
#define MyAppDir "D:\8.ToolMaster" 
[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
PrivilegesRequired=lowest
AppId={{534F92C9-6D0D-4E75-98D0-CD3EC8CA26F2}}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}

DefaultDirName={commonpf64}\{#MyAppName}
;DefaultDirName={sd}\LG_ESL\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir={#MyAppDir}\ToolMaster\Setup
OutputBaseFilename=ToolMasterSetup.V2(x64)_{#MyAppVersion}({#MyAppDate})
Compression=lzma
SolidCompression=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"
Name: "ko"; MessagesFile: "compiler:Languages\Korean.isl"


[CustomMessages]
en.AppNotOSMatchCheckError=Application requires 64bit Windows OS.%nPlease try again with the 32bit installation version.
ko.AppNotOSMatchCheckError=어플리케이션은 64bit 윈도우용 입니다.%n32bit OS용 설치프로그램으로 다시 시도하십시오.

en.AppDotNetCheckError=Application requires Microsoft .NET Framework @version@.%nPlease use Windows Update to install this version, and then re-run the Application setup program.
ko.AppDotNetCheckError=어플리케이션은 Microsoft .NET Framework @version@ 이 필요합니다.%n윈도우 업데이트를 이용해서 .Net Framework @version@을 설치한 후에 설치 프로그램을 다시 실행해 주십시오.


;en.AppJavaCheckError=Java v @version@ or newer not found in the system.%nJava @version@ or later is required to run this application (can be installed after this installation too).%nDo you want to continue?
;ko.AppJavaCheckError=Java v @version@ 또는 이상을 시스템에서 발견하지 못했습니다.%n어플리케이션은 Java @version@ 또는 이상의 버전이 필요합니다.(어플리케이션 설치 후에 설치해도 됩니다.).%n설치를 계속하시겠습니까?

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";

[Files]
Source: "{#MyAppDir}\ToolMaster\bin\x64\Release\*"; DestDir: "{app}"; Flags: ignoreversion


; NOTE: Don't use "Flags: ignoreversion" on any shared system files
;Source: "E:\프로젝트\ESL\Src\TemplateEditor_Dev 2015\TemplateEditor\bin\Release\ko\*.dll"; DestDir: "{app}\ko"; Flags: ignoreversion

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{group}\Uninstall {#MyAppName}"; Filename: "{uninstallexe}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: files; Name: "{app}\ko\*"
Type: files; Name: "{app}\ja\*"
Type: files; Name: "{app}\Font\*"
Type: filesandordirs; Name: "{app}\ko"
Type: filesandordirs; Name: "{app}\ja"
Type: filesandordirs; Name: "{app}\Font"
Type: files; Name: "{app}\*"
Type: files; Name: "{app}"
Type: files; Name: "{group}"
Type: filesandordirs; Name: "{app}"
Type: filesandordirs; Name: "{group}"   


[Registry]
;Root: "HKCU"; Subkey: "Software\ESL Package Info\Template Editor"; ValueType: string; ValueName: "VER"; ValueData: "{#MyAppVersion}"; Flags: createvalueifdoesntexist uninsdeletekey deletevalue
;Root: "HKCU"; Subkey: "Software\ESL Package Info\Template Editor"; ValueType: string; ValueName: "DATE"; ValueData: "{#MyAppDate}"; Flags: createvalueifdoesntexist uninsdeletekey deletevalue

[Code]


function BoolToStr(Value: Boolean): String; 
begin
  if Value then
    Result := 'Yes'
  else
    Result := 'No';
end;

function IsJavaDetected(version: string ): boolean;
var 
  ChkVersion: array of Char;
  ErrorCode: Integer;
  JavaInstalled : Boolean;
  ResultMsg : Boolean;
  Versions: string;
  I: Integer;
  regRoot: Integer;
  Message: string;
  JavaHome: string;
  JavaHome_cvt: string;
  pos: Integer;
  x86str: string;
  begin
    regRoot := HKLM32
    begin
        if IsWin64 then
      begin
        regRoot := HKLM64
      end;
    end;
    if(RegQueryStringValue(regRoot, 'SOFTWARE\JavaSoft\Java Runtime Environment', 'CurrentVersion', Versions) or (RegQueryStringValue(regRoot, 'SOFTWARE\JavaSoft\Java Development Kit', 'CurrentVersion', Versions))) then
    begin
        if(RegQueryStringValue(regRoot, 'SOFTWARE\JavaSoft\Java Runtime Environment\'+Versions, 'JavaHome', JavaHome) or (RegQueryStringValue(regRoot, 'SOFTWARE\JavaSoft\Java Development Kit\'+Versions, 'JavaHome', JavaHome))) then
          begin
          JavaInstalled := true;

          if IsWin64 then
            begin
            x86str := '(x86)';
            JavaHome_cvt := JavaHome;
            StringChangeEx(JavaHome_cvt , x86str,  '', True);
            if CompareText(JavaHome, JavaHome_cvt) <> 0 then
              begin
              //MsgBox('x86', mbConfirmation, MB_OK);
              JavaInstalled := false;
              end
            else
              begin
              JavaInstalled := true;
              end
            end
        end
      
      //JavaInstalled := true;
    end	
    else 
      begin
      if regRoot = HKLM64 then
        begin 
        if(RegQueryStringValue(regRoot, 'SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment', 'CurrentVersion', Versions) or (RegQueryStringValue(regRoot, 'SOFTWARE\WOW6432Node\JavaSoft\Java Development Kit', 'CurrentVersion', Versions))) then
          begin
          if(RegQueryStringValue(regRoot, 'SOFTWARE\WOW6432Node\JavaSoft\Java Runtime Environment\'+Versions, 'JavaHome', JavaHome) or (RegQueryStringValue(regRoot, 'SOFTWARE\WOW6432Node\JavaSoft\Java Development Kit\'+Versions, 'JavaHome', JavaHome))) then
            begin
            //MsgBox('Is64' + BoolToStr(IsWin64) + ' JavaHome' + JavaHome, mbConfirmation, MB_OK);
            x86str := '(x86)';
            JavaHome_cvt := JavaHome;
            StringChangeEx(JavaHome_cvt , x86str,  '', True);
            if CompareText(JavaHome, JavaHome_cvt) <> 0 then
              begin
              //MsgBox('x86', mbConfirmation, MB_OK);
              JavaInstalled := false;
              end
              else
              JavaInstalled := true;
              end;
           
          //JavaInstalled := true;
          end
         else
          JavaInstalled := false;
         end;
    end;
    if JavaInstalled then
      begin
      if ( Versions[2]='.' ) and ( ( StrToInt(Versions[1]) > StrToInt(version[1]) ) or ( ( StrToInt(Versions[1]) = StrToInt(version[1]) ) and ( StrToInt(Versions[3]) >= StrToInt(version[3]) ) ) ) then
        begin
        JavaInstalled := true;
        end
      else
        begin
        JavaInstalled := false;
        end
      end;
    if JavaInstalled then
    begin
      Result := true;
    end else
    begin
    Message := ExpandConstant('{cm:AppJavaCheckError}');
    StringChangeEx(Message , '@version@',  version, True);
        
    ResultMsg := MsgBox(Message,
		//ResultMsg := MsgBox('Oracle Java v' + version + ' or newer not found in the system. Java ' + version + ' or later is required to run this application (can be installed after this installation too). Do you want to continue?',
		mbConfirmation, MB_YESNO) = idYes;
		if ResultMsg = false then
			begin
			Result := false;
      ShellExec('open','http://www.java.com/getjava/','','',SW_SHOWNORMAL,ewNoWait,ErrorCode);
		end else
			begin
			Result := true;
			ShellExec('open','http://www.java.com/getjava/','','',SW_SHOWNORMAL,ewNoWait,ErrorCode);
		end;
	end;	
end;

function IsDotNetDetected(version: string; service: cardinal): boolean;
// Indicates whether the specified version and service pack of the .NET Framework is installed.
//
// version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1'          .NET Framework 1.1
//    'v2.0'          .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//    'v4.5'          .NET Framework 4.5
//    'v4.5.1'        .NET Framework 4.5.1
//    'v4.5.2'        .NET Framework 4.5.2
//    'v4.6'          .NET Framework 4.6
//    'v4.6.1'        .NET Framework 4.6.1
//
// service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
var
    key, versionKey: string;
    install, release, serviceCount, versionRelease: cardinal;
    success: boolean;
begin                                                                                                            
    versionKey := version;
    versionRelease := 0;

    // .NET 1.1 and 2.0 embed release number in version key
    if version = 'v1.1' then begin
        versionKey := 'v1.1.4322';
    end else if version = 'v2.0' then begin
        versionKey := 'v2.0.50727';
    end

    // .NET 4.5 and newer install as update to .NET 4.0 Full
    else if Pos('v4.', version) = 1 then begin
        versionKey := 'v4\Full';
        case version of
          'v4.5':   versionRelease := 378389;
          'v4.5.1': versionRelease := 378675; // or 378758 on Windows 8 and older
          'v4.5.2': versionRelease := 379893;
          'v4.6':   versionRelease := 393295; // or 393297 on Windows 8.1 and older
          'v4.6.1': versionRelease := 394254; // or 394271 on Windows 8.1 and older
        end;
    end;

    // installation key group for all .NET versions
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + versionKey;

    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;

    // .NET 4.0 and newer use value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;

    // .NET 4.5 and newer use additional value Release
    if versionRelease > 0 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Release', release);
        success := success and (release >= versionRelease);
    end;

    result := success and (install = 1) and (serviceCount >= service);
end;


function InitializeSetup(): Boolean;
var
  Message: string;
  ErrorCode: integer;
  begin
    if not IsWin64 then
    begin
      Message := ExpandConstant('{cm:AppNotOSMatchCheckError}');
      MsgBox(Message, mbInformation, MB_OK);
    end
    else      
      if not IsDotNetDetected('v4.0', 0) then begin
          //MsgBox('Application requires Microsoft .NET Framework 4.0.'#13#13
            //  'Please use Windows Update to install this version,'#13
              //'and then re-run the Application setup program.', mbInformation, MB_OK);
          Message := ExpandConstant('{cm:AppDotNetCheckError}');
          StringChangeEx(Message , '@version@',  '4.0', True);
          
          MsgBox(Message, mbInformation, MB_OK);
          ShellExec('open','https://www.microsoft.com/Download/details.aspx?id=17718','','',SW_SHOWNORMAL,ewNoWait,ErrorCode);
          //MsgBox(ExpandConstant('{cm:AppDotNetCheckError}'), mbInformation, MB_OK);
          result := false;
      end else
          if not IsJavaDetected('1.8') then begin
            result := false;
          end else
            result := true;
end;